# =============================================================================
# INFOTEC - Configuración Automática de Laravel con Docker Compose
# =============================================================================
# PROPÓSITO: Crear y ejecutar Laravel automáticamente con UN SOLO COMANDO
# USO: docker compose up -d
# RESULTADO: Laravel ejecutándose en http://localhost:8000
# =============================================================================

services:
  # ============================================
  # BASE DE DATOS MARIADB
  # ============================================
  mariadb:
    image: bitnami/mariadb:11.4
    container_name: infotec_mariadb
    environment:
      - ALLOW_EMPTY_PASSWORD=no
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MARIADB_DATABASE=${MARIADB_DATABASE}
      - MARIADB_USER=${MARIADB_USER}
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}
      - MARIADB_CHARACTER_SET=utf8mb4
      - MARIADB_COLLATE=utf8mb4_unicode_ci
    volumes:
      - mariadb_data:/bitnami/mariadb
    restart: unless-stopped
    networks:
      - laravel-network
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost --silent || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # ============================================
  # APLICACIÓN LARAVEL CON CREACIÓN AUTOMÁTICA
  # ============================================
  laravel:
    image: bitnami/laravel:11
    container_name: infotec_laravel
    environment:
      - LARAVEL_DATABASE_TYPE=mysql
      - LARAVEL_DATABASE_HOST=mariadb
      - LARAVEL_DATABASE_PORT_NUMBER=3306
      - LARAVEL_DATABASE_NAME=${MARIADB_DATABASE}
      - LARAVEL_DATABASE_USER=${MARIADB_USER}
      - LARAVEL_DATABASE_PASSWORD=${MARIADB_PASSWORD}
      - LARAVEL_VERSION=${LARAVEL_VERSION:-11.*}
      - PHP_MEMORY_LIMIT=256M
      - PHP_MAX_EXECUTION_TIME=300
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app
      - vendor_data:/app/vendor
      - composer_cache:/root/.composer/cache
    command: >
      bash -c "
        echo '🚀 Iniciando Laravel automático...'
        
        # Esperar MariaDB
        for i in {1..30}; do
          mysqladmin ping -h mariadb -u \$$LARAVEL_DATABASE_USER -p\$$LARAVEL_DATABASE_PASSWORD --silent && break
          sleep 2
        done
        
        cd /app
        
        # Crear Laravel si no existe
        if [ ! -f artisan ]; then
          composer create-project laravel/laravel:\$$LARAVEL_VERSION . --no-interaction --quiet
        fi
        
        # Configurar Laravel
        [ ! -f .env ] && cp .env.example .env
        [ ! -d vendor ] && composer install --no-interaction --quiet
        
        # Configurar base de datos en .env
        sed -i 's/DB_HOST=.*/DB_HOST=mariadb/' .env
        sed -i \"s/DB_DATABASE=.*/DB_DATABASE=\$$LARAVEL_DATABASE_NAME/\" .env
        sed -i \"s/DB_USERNAME=.*/DB_USERNAME=\$$LARAVEL_DATABASE_USER/\" .env
        sed -i \"s/DB_PASSWORD=.*/DB_PASSWORD=\$$LARAVEL_DATABASE_PASSWORD/\" .env
        
        # Preparar Laravel
        php artisan key:generate --force --no-interaction
        php artisan migrate --force --no-interaction
        chmod -R 775 storage bootstrap/cache 2>/dev/null || true
        
        echo '✅ Laravel listo → http://localhost:8000'
        exec php artisan serve --host=0.0.0.0 --port=8000
      "
    depends_on:
      mariadb:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - laravel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s


# =============================================================================
# VOLÚMENES PERSISTENTES
# =============================================================================
volumes:
  mariadb_data:
    driver: local
    # Persistencia de datos de MariaDB (volumen Docker gestionado)
  
  vendor_data:
    driver: local
    # Carpeta vendor de Composer para rendimiento (ESENCIAL en Windows)
    
  composer_cache:
    driver: local
    # Cache de Composer para acelerar instalaciones

# =============================================================================
# RED INTERNA
# =============================================================================
networks:
  laravel-network:
    driver: bridge
    # Red interna para comunicación entre contenedores
    